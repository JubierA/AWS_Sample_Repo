# branch
# code fmt/lint/validate/sec
# terraform/aws security
# terraform plan
# approve
# init pyenv
# pytest
# approve
# push

name: Example Service Release

on:
  workflow_dispatch:
  push:
    branches: [testing-testing] # dont want to kick it off yet
    paths: ["**"] # change to all unless separating repo, prefer mono repo

  pull_request:
    branches: [testing-testing] # dont want to kick it off yet
    paths: ["**"] # change to all unless separating repo, prefer mono repo

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-20.04 # variable this
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1 # variable this
      - name: Initialise project and view terraform plan
        run: |
          cd terraform
          terraform init # changed to init first, then fmt
          terraform fmt
          terraform plan -var='example_api_key=${{ secrets.EXAMPLE_API_KEY }}'

# need approval step between in here first? there is a needs requirement in the deploy

  deploy:
    name: Terraform Deploy
    needs: plan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04 # variable this
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1 # variable this
      - name: Initialise project and deploy terraform
        run: |
          cd terraform
          terraform init # changed to init first, then fmt
          terraform fmt
          terraform apply -var='example_api_key=${{ secrets.EXAMPLE_API_KEY }}' --auto-approve=true
